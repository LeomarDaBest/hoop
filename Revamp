local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Auto Shoot High Arc",
   Icon = 0,
   LoadingTitle = "Auto Shoot",
   LoadingSubtitle = "by Author",
   Theme = "Default",
   ConfigurationSaving = {
      Enabled = true,
      FileName = "HighArcAutoShoot"
   },
   KeySystem = false
})

local Tab = Window:CreateTab("Shooting", 4483362458)
Tab:CreateSection("Shooting Features")

local AutoShootEnabled = false
local AutoPowerEnabled = false

local Player = game.Players.LocalPlayer
local Character = Player.Character or Player.CharacterAdded:Wait()
local VirtualInputManager = game:GetService("VirtualInputManager")

local function GetArc(dist)
    return ({
        [59] = 34, [60] = 34, [61] = 34, [62] = 34,
        [63] = 32, [64] = 32, [65] = 32,
        [66] = 29, [67] = 29,
        [68] = 27, [69] = 27,
        [70] = 24, [71] = 24, [72] = 22
    })[dist] or 34 -- Always high arc fallback
end

local function IsHoldingBasketball()
    local Basketball = Character:FindFirstChild("Basketball")
    return Basketball and Basketball:FindFirstChild("Ball")
end

local function GetGoal()
    local Distance, Goal = math.huge, nil
    local CharacterPosition = Character.PrimaryPart.Position
    for _, container in ipairs({workspace:FindFirstChild("Courts"), workspace:FindFirstChild("PracticeArea")}) do
        if container then
            for _, court in ipairs(container:GetChildren()) do
                for _, Obj in ipairs(court:GetDescendants()) do
                    if Obj.Name == "Swish" and Obj.Parent:FindFirstChildOfClass("TouchTransmitter") then
                        local Magnitude = (CharacterPosition - Obj.Parent.Position).Magnitude
                        if Magnitude < Distance then
                            Distance, Goal = Magnitude, Obj.Parent
                        end
                    end
                end
            end
        end
    end
    return Goal, Distance
end

local function TriggerShoot()
    VirtualInputManager:SendTouchEvent(1, Enum.UserInputState.Begin.Value, 355, 70)
    task.wait(0.01)
    VirtualInputManager:SendTouchEvent(1, Enum.UserInputState.End.Value, 355, 70)
end

local function SetAutoPower(Distance)
    if not AutoPowerEnabled then return end
    local Power = nil
    if Distance >= 60 and Distance <= 61 then Power = 75 end
    if Distance >= 38 and Distance <= 39 then Power = 60 end
    if Distance >= 16 and Distance <= 17 then Power = 30 end
    if Distance >= 51 and Distance <= 52 then Power = 65 end
    if Distance >= 49 and Distance <= 50 then Power = 65 end
    if Distance >= 43 and Distance <= 44 then Power = 60 end
    if Distance >= 47 and Distance <= 48 then Power = 65 end
    if Distance >= 37 and Distance <= 38 then Power = 55 end
    if Distance == 54 then Power = 70 end
    if Distance >= 44 and Distance <= 45 then Power = 60 end
    if Distance >= 8 and Distance <= 12 then Power = 20 end
    if Distance >= 17 and Distance <= 19 then Power = 20 end
    if Power then Player:SetAttribute("Power", Power) end
end

local Humanoid = Character:WaitForChild("Humanoid")
Humanoid.StateChanged:Connect(function(_, NewState)
    if AutoShootEnabled and NewState == Enum.HumanoidStateType.Jumping then
        task.wait(0.3)
        if IsHoldingBasketball() then
            local _, Distance = GetGoal()
            SetAutoPower(math.floor(Distance))
            TriggerShoot()
        end
    end
end)

Tab:CreateToggle({
   Name = "Auto Shoot on Jump",
   CurrentValue = false,
   Flag = "AutoShoot",
   Callback = function(Value)
       AutoShootEnabled = Value
   end
})

Tab:CreateToggle({
   Name = "Auto Power",
   CurrentValue = false,
   Flag = "AutoPower",
   Callback = function(Value)
       AutoPowerEnabled = Value
   end
})
