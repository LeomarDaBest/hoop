local WindUI = loadstring(game:HttpGet("https://tree-hub.vercel.app/api/UI/WindUI"))()

local Window = WindUI:CreateWindow({
    Title = "DR Hub",
    Icon = "atom",
    Author = "by @draco",
    Folder = "CloudHub",
    Size = UDim2.fromOffset(505, 325),
    KeySystem = {
        Key = "XRHV1KS",
        Note = "Key In Discord",
        URL = "https://discord.gg/U3Ahz8MM",
        SaveKey = true,
    },
    Transparent = true,
    Theme = "Red",
    SideBarWidth = 175,
    HasOutline = true,
})

-- General Tab
local Tab1 = Window:Tab({
    Title = "General",
    Icon = "globe",
})

Window:Divider()

-- Shooting & Indicator Section
local Section1 = Tab1:Section({
    Title = "Shooting & Indicator",
    TextXAlignment = "Left",
    TextSize = 17,
})

local ToggleShooting = Tab1:Toggle({
    Title = "Enable Shooting",
    Desc = "",
    Value = true,
    Callback = function(state)
        print("Shooting: ", state)
    end,
})

local ToggleIndicator = Tab1:Toggle({
    Title = "Indicator",
    Desc = "",
    Value = true,
    Callback = function(state)
        if state then
            EnableIndicator()
        else
            DisableIndicator()
        end
    end,
})

-- Optimized Goal Detection
local function GetClosestGoal()
    local closestGoal, minDist = nil, math.huge
    local player = game.Players.LocalPlayer
    local character = player.Character
    local torso = character and (character:FindFirstChild("Torso") or character:FindFirstChild("UpperTorso"))
    
    if not torso then return nil end
    local playerPos = torso.Position

    for _, area in ipairs({"Courts", "PracticeArea"}) do
        local container = game.Workspace:FindFirstChild(area)
        if container then
            for _, court in ipairs(container:GetChildren()) do
                for _, obj in ipairs(court:GetDescendants()) do
                    if obj.Name == "Swish" and obj.Parent:FindFirstChildOfClass("TouchTransmitter") then
                        local dist = (playerPos - obj.Parent.Position).Magnitude
                        if dist < minDist then
                            minDist = dist
                            closestGoal = obj.Parent
                        end
                    end
                end
            end
        end
    end

    return closestGoal, minDist
end

-- Indicator Management
local indicatorLabel

local function UpdateIndicator()
    if not indicatorLabel then return end
    local goal, distance = GetClosestGoal()
    
    if not goal then
        indicatorLabel.Text = "No Hoop Detected"
        indicatorLabel.TextColor3 = Color3.fromRGB(255, 0, 0) -- Red
        return
    end

    local status = "Out"
    if distance >= 59 and distance <= 72 then
        status = "Perfect"
        indicatorLabel.TextColor3 = Color3.fromRGB(0, 255, 0) -- Green
    else
        indicatorLabel.TextColor3 = Color3.fromRGB(255, 165, 0) -- Orange
    end

    indicatorLabel.Text = "Range: " .. math.floor(distance) .. " (" .. status .. ")"
end

local function EnableIndicator()
    if indicatorLabel then return end
    local gui = Instance.new("ScreenGui", game.Players.LocalPlayer:WaitForChild("PlayerGui"))

    indicatorLabel = Instance.new("TextLabel", gui)
    indicatorLabel.Size = UDim2.new(0.3, 0, 0.05, 0)
    indicatorLabel.Position = UDim2.new(0.35, 0, 0, 10)
    indicatorLabel.BackgroundTransparency = 1
    indicatorLabel.TextScaled = true
    indicatorLabel.Font = Enum.Font.SourceSansBold

    game:GetService("RunService").Heartbeat:Connect(UpdateIndicator)
end

local function DisableIndicator()
    if indicatorLabel then
        indicatorLabel.Parent:Destroy()
        indicatorLabel = nil
    end
end
