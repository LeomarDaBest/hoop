local WindUI = loadstring(game:HttpGet("https://tree-hub.vercel.app/api/UI/WindUI"))()

local Window = WindUI:CreateWindow({
    Title = "DR Hub", 
    Icon = "atom", 
    Author = "by @draco", 
    Folder = "CloudHub", 
    Size = UDim2.fromOffset(505, 325),
    KeySystem = {
        Key = "XRHV1KS", 
        Note = "Key In Discord", 
        URL = "https://discord.gg/U3Ahz8MM", 
        SaveKey = true, 
    }, 
    Transparent = true,
    Theme = "Red", 
    SideBarWidth = 175,
    HasOutline = true, 
})

-- General Tab
local Tab1 = Window:Tab({ Title = "General", Icon = "globe" })
Window:Divider()
local Tab2 = Window:Tab({ Title = "Execution", Icon = "folder" })

-- Shooting & Indicator Section
local Section1 = Tab1:Section({ Title = "Shooting & Indicator", TextXAlignment = "Left", TextSize = 17 })

local ShootingType = "Silent Aim" -- Default

Tab1:Dropdown({
    Title = "Shooting Type",
    Value = "Silent Aim",
    Values = { "Silent Aim", "Camlock" },
    Callback = function(value)
        ShootingType = value
        if value == "Camlock" then Camlock(true) end
    end
})

Tab1:Toggle({
    Title = "Enable Shooting",
    Value = true,
    Callback = function(state)
        print("Shooting Enabled:", state)
    end,
})

Tab1:Toggle({
    Title = "Indicator",
    Value = true,
    Callback = function(state)
        if state then EnableIndicator() else DisableIndicator() end
    end
})

-- Reach & Mags Section
local Section2 = Tab1:Section({ Title = "Reach & Mags", TextXAlignment = "Left", TextSize = 17 })

Tab1:Toggle({
    Title = "Enable Reach + Mags",
    Value = true,
    Callback = function(state)
        print("Reach Enabled:", state)
    end,
})

Tab1:Slider({
    Title = "Reach Distance",
    Step = 1,
    Value = { Min = 0, Max = 75, Default = 70 },
    Callback = function(value)
        MAX_DISTANCE = value
        print("New MAX_DISTANCE:", value)
    end
})

Tab1:Slider({
    Title = "Mags Distance",
    Step = 1,
    Value = { Min = 0, Max = 100, Default = 70 },
    Callback = function(value)
        MAX_DISTANCE = value
        print("New Mags Distance:", value)
    end
})

-- === Optimized Indicator ===
local function EnableIndicator()
    local ScreenGui = Instance.new("ScreenGui", game.Players.LocalPlayer:WaitForChild("PlayerGui"))
    local TextLabel = Instance.new("TextLabel", ScreenGui)
    TextLabel.Size = UDim2.new(0.3, 0, 0.05, 0)
    TextLabel.Position = UDim2.new(0.35, 0, 0, 10)
    TextLabel.BackgroundTransparency = 1
    TextLabel.TextScaled = true
    TextLabel.TextColor3 = Color3.new(1, 1, 1)
    TextLabel.Font = Enum.Font.SourceSansBold

    local function GetGoal()
        local closestGoal, closestDistance = nil, math.huge
        local playerPos = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character.PrimaryPart.Position
        if not playerPos then return nil, closestDistance end

        for _, area in ipairs({ "Courts", "PracticeArea" }) do
            local container = game.Workspace:FindFirstChild(area)
            if container then
                for _, court in ipairs(container:GetChildren()) do
                    for _, obj in ipairs(court:GetDescendants()) do
                        if obj.Name == "Swish" and obj.Parent:FindFirstChildOfClass("TouchTransmitter") then
                            local dist = (playerPos - obj.Parent.Position).Magnitude
                            if dist < closestDistance then
                                closestDistance = dist
                                closestGoal = obj.Parent
                            end
                        end
                    end
                end
            end
        end
        return closestGoal, closestDistance
    end

    local function UpdateRangeStatus()
        local Goal, Distance = GetGoal()
        if not Goal then TextLabel.Text = "No Hoop Detected"; return end
        TextLabel.Text = Distance >= 59 and Distance <= 72 and "Perfect Shot Range!" or "Out of Range"
        TextLabel.TextColor3 = Distance >= 59 and Distance <= 72 and Color3.new(0, 1, 0) or Color3.new(1, 0, 0)
    end

    game:GetService("RunService").RenderStepped:Connect(function()
        UpdateRangeStatus()
    end)
end

local function DisableIndicator()
    for _, gui in pairs(game.Players.LocalPlayer.PlayerGui:GetChildren()) do
        if gui:IsA("ScreenGui") and gui:FindFirstChildOfClass("TextLabel") then
            gui:Destroy()
        end
    end
end

-- === Camlock System ===
local function Camlock(enabled)
    local Camera = game.Workspace.CurrentCamera
    local Player = game.Players.LocalPlayer
    local Character = Player.Character or Player.CharacterAdded:Wait()
    local Humanoid = Character:FindFirstChild("Humanoid")
    local UserInputService = game:GetService("UserInputService")

    local function GetGoal()
        local closestGoal, closestDistance = nil, math.huge
        local playerPos = Character.PrimaryPart.Position

        for _, area in ipairs({ "Courts", "PracticeArea" }) do
            local container = game.Workspace:FindFirstChild(area)
            if container then
                for _, court in ipairs(container:GetChildren()) do
                    for _, obj in ipairs(court:GetDescendants()) do
                        if obj.Name == "Swish" and obj.Parent:FindFirstChildOfClass("TouchTransmitter") then
                            local dist = (playerPos - obj.Parent.Position).Magnitude
                            if dist < closestDistance then
                                closestDistance = dist
                                closestGoal = obj.Parent
                            end
                        end
                    end
                end
            end
        end
        return closestGoal, closestDistance
    end

    local function UpdateCamera()
        if not enabled then return end
        local Goal, Distance = GetGoal()
        if Goal then
            local TargetPosition = Goal.Position + Vector3.new(0, 10, 0)
            Camera.CFrame = CFrame.new(Camera.CFrame.Position, TargetPosition)
        end
    end

    game:GetService("RunService").RenderStepped:Connect(UpdateCamera)

    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.UserInputType == Enum.UserInputType.MouseButton2 then
            enabled = not enabled
            print("Camlock:", enabled and "Enabled" or "Disabled")
        end
    end)
end

Camlock(true)
