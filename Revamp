print("User Executed Leomar.cc!")
if game.PlaceId == 6229116934 then
    local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
    if not Rayfield then return end

    local Window = Rayfield:CreateWindow({
        Name = "Leomar.cc",
        LoadingTitle = "Leomar.cc Interface",
        LoadingSubtitle = "by HOOPZ [CHRISTMAS] (Basketball)",
        ConfigurationSaving = {
            Enabled = true,
            FolderName = "Leomar",
            FileName = "Config"
        },
        Discord = {
            Enabled = false
        },
        KeySystem = true,
        KeySettings = {
            Title = "Leomar.cc Key System",
            Subtitle = "Enter your key",
            Note = "Join our Discord for keys!",
            FileName = "LeomarKey",
            SaveKey = false,
            GrabKeyFromSite = true,
            Key = {"Leomar0nTop", "Leomardagoat", "Leomar2Fye", "Only4LaDevs"},
            Site = "https://rekonise.com/key-system-12-tj4fc"
        }
    })

    local Tab1 = Window:CreateTab("Shooting", nil) -- Icon not supported in Rayfield
    local Tab4 = Window:CreateTab("Indicator", nil)
    local Tab2 = Window:CreateTab("Physics", nil)
    local Tab3 = Window:CreateTab("Settings", nil)

    -- Services & Variables
    local Players = game:GetService("Players")
    local RunService = game:GetService("RunService")
    local Workspace = game:GetService("Workspace")
    local UserInputService = game:GetService("UserInputService")
    local Player = Players.LocalPlayer
    local Camera = Workspace.CurrentCamera
    local CamlockEnabled = false
    local CamlockActive = false
    local ArcType = "None"

    -- Shooting Section
    Tab1:CreateSection("Camlock")

    -- Dropdown for Shooting Type
    Tab1:CreateDropdown({
        Name = "Shooting Type",
        Options = {"Pc High Arc", "Pc Low Arc", "Mobile High Arc", "Mobile Low Arc"},
        CurrentOption = "Choose a Type",
        Flag = "ShootingType",
        Callback = function(Value)
            ArcType = Value
        end
    })

    -- Toggle for Camlock
    Tab1:CreateToggle({
        Name = "Enable Arcs",
        CurrentValue = false,
        Flag = "CamlockToggle",
        Callback = function(state)
            CamlockEnabled = state
        end
    })

    -- Function to Check If Player Has Ball
    local function HasBall()
        return Player.Character and Player.Character:FindFirstChild("Basketball") ~= nil
    end

    -- Function to Get Nearest Goal
    local function GetGoal()
        local Distance, Goal = math.huge, nil
        local Character = Player.Character
        if not Character or not Character.PrimaryPart then return nil end
        local CharacterPosition = Character.PrimaryPart.Position

        for _, court in ipairs(Workspace:GetChildren()) do
            for _, Obj in ipairs(court:GetDescendants()) do
                if Obj.Name == "Swish" and Obj.Parent:FindFirstChildOfClass("TouchTransmitter") then
                    local Magnitude = (CharacterPosition - Obj.Parent.Position).Magnitude
                    if Magnitude < Distance then
                        Distance = Magnitude
                        Goal = Obj.Parent
                    end
                end
            end
        end

        return Goal, Distance
    end

    -- Function to Calculate Shooting Arc
    local function CalculateArc(distance)
        if ArcType == "Pc High Arc" then
            return math.max(0.029 * (distance ^ 2) - 1.0 * distance + 15, 5)
        elseif ArcType == "Pc Low Arc" then
            return math.max(0.025 * (distance ^ 2) - 1.2 * distance + 20, 5)
        elseif ArcType == "Mobile High Arc" then
            return math.max(0.020 * (distance ^ 2) - 1.8 * distance + 40, 8)
        elseif ArcType == "Mobile Low Arc" then
            return math.max(0.015 * (distance ^ 2) - 1.3 * distance + 35, 5)
        end
    end

    -- Function to Activate Camlock
    local function ActivateCamlock()
        if not CamlockEnabled or not HasBall() or CamlockActive then return end
        CamlockActive = true

        local Goal, Distance = GetGoal()
        if Goal then
            local ArcHeight = CalculateArc(math.floor(Distance))
            local BasketPosition = Goal.Position + Vector3.new(0, ArcHeight, 0)

            Camera.CFrame = CFrame.new(Camera.CFrame.Position, BasketPosition + Vector3.new(0, 0.1, 0))
            task.wait(1)
            Camera.CameraType = Enum.CameraType.Custom
        end

        CamlockActive = false
    end

    -- Detect Jumping to Trigger Camlock
    local Humanoid = Player.Character and Player.Character:FindFirstChild("Humanoid")
    if Humanoid then
        Humanoid.StateChanged:Connect(function(_, NewState)
            if CamlockEnabled and HasBall() and NewState == Enum.HumanoidStateType.Jumping then
                ActivateCamlock()
            end
        end)
    end

    Tab1:CreateSection("Aimbot")

    local connection = nil
    local isLocking = false
    local jumpConnection, landConnection

    local function AdjustPower(distance)
        if distance >= 58 and distance <= 62 then
            Player:SetAttribute("Power", 75)
        elseif distance >= 63 and distance <= 66 then
            Player:SetAttribute("Power", 80)
        elseif distance >= 67 and distance <= 72.4 then
            Player:SetAttribute("Power", 85)
        end
    end

    local function GetClosestGoal()
        local closestDistance = math.huge
        local closestGoal = nil

        for _, obj in pairs(workspace.Courts:GetDescendants()) do
            if obj.Name == "Swish" and obj.Parent:FindFirstChildOfClass("TouchTransmitter") then
                local character = Player.Character or Player.CharacterAdded:Wait()
                local torso = character:FindFirstChild("HumanoidRootPart")

                if torso then
                    local distance = (torso.Position - obj.Parent.Position).Magnitude
                    if distance < closestDistance then
                        closestDistance = distance
                        closestGoal = obj.Parent
                    end
                end
            end
        end

        if closestGoal then
            AdjustPower(closestDistance)
        end

        return closestGoal, closestDistance
    end

    local function StartLocking()
        if isLocking then return end
        isLocking = true

        connection = RunService.RenderStepped:Connect(function()
            local closestGoal, distance = GetClosestGoal()
            if closestGoal then
                if distance >= 73.2 then
                    StopLocking()
                    return
                end

                local character = Player.Character or Player.CharacterAdded:Wait()
                local head = character:FindFirstChild("Head")
                if head then
                    local vector = Vector3.new(0, 8, 0)
                    if distance >= 58 and distance <= 61 then
                        vector = Vector3.new(0, 9, 0)
                    elseif distance == 62 then
                        vector = Vector3.new(0, 8, 0)
                    elseif distance == 63 then
                        vector = Vector3.new(0, 14, 0)
                    elseif distance >= 73 and distance <= 73.1 then
                        vector = Vector3.new(0, 20, 0)
                    elseif distance >= 67 and distance <= 72.4 then
                        vector = Vector3.new(0, 19, 0)
                    end
                    local goalPosition = closestGoal.Position + vector
                    Camera.CFrame = CFrame.new(Camera.CFrame.Position, goalPosition)
                end
            end
        end)
    end

    local function StopLocking()
        if not isLocking then return end
        isLocking = false
        if connection then
            connection:Disconnect()
            connection = nil
        end
    end

    local function PlayerHasBall()
        local character = Player.Character or Player.CharacterAdded:Wait()
        return character:FindFirstChild("Basketball") ~= nil
    end

    function AimbotCallback(state)
        MA    MAimbotEnabled = state

        if state then
            local practiceArea = workspace:WaitForChild("PracticeArea", 5)
            if practiceArea then
                local courts = workspace:FindFirstChild("Courts")
                if courts then
                    practiceArea.Parent = courts
                else
                    warn("Courts folder not found.")
                end
            else
                warn("PracticeArea not found.")
            end

            local success, Button = pcall(function()
                return Player:WaitForChild("PlayerGui"):WaitForChild("PowerUI"):WaitForChild("CursorButton")
            end)
