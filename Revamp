local WindUI = loadstring(game:HttpGet("https://tree-hub.vercel.app/api/UI/WindUI"))()

local Window = WindUI:CreateWindow({
    Title = "DR Hub",
    Icon = "atom",
    Author = "by @draco",
    Folder = "CloudHub",
    Size = UDim2.fromOffset(505, 325),
    KeySystem = {
        Key = "XRHV1KS",
        Note = "Key In Discord",
        URL = "https://discord.gg/U3Ahz8MM",
        SaveKey = true,
    },
    Transparent = true,
    Theme = "Red",
    SideBarWidth = 175,
    HasOutline = true,
})

-- General Tab
local Tab1 = Window:Tab({
    Title = "General",
    Icon = "globe",
})

Window:Divider()

-- Shooting & Indicator Section
local Section1 = Tab1:Section({
    Title = "Shooting & Indicator",
    TextXAlignment = "Left",
    TextSize = 17,
})

local Dropdown = Tab1:Dropdown({
    Title = "Shooting Type",
    Desc = "",
    Value = "Tab 1",
    Multi = false,
    AllowNone = true,
    Values = {
        "Silent Aim", "Camlock"
    },
    Callback = function(value)
        print(value)
        if value == "Camlock" then
            Camlock()  -- Call the Camlock function when selected
        end
    end
})

local ToggleShooting = Tab1:Toggle({
    Title = "Enable Shooting",
    Desc = "",
    Value = true,
    Callback = function(state)
        print("Shooting Enabled:", state)
    end,
})

local indicatorLabel
local function EnableIndicator()
    if indicatorLabel then return end  -- Prevent duplicate indicators

    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

    indicatorLabel = Instance.new("TextLabel", ScreenGui)
    indicatorLabel.Size = UDim2.new(0.3, 0, 0.05, 0)
    indicatorLabel.Position = UDim2.new(0.35, 0, 0, 10)
    indicatorLabel.BackgroundTransparency = 1
    indicatorLabel.TextScaled = true
    indicatorLabel.TextColor3 = Color3.new(1, 1, 1)
    indicatorLabel.Font = Enum.Font.SourceSansBold
    indicatorLabel.Text = ""

    game:GetService("RunService").Heartbeat:Connect(UpdateRangeStatus)
end

local function DisableIndicator()
    if indicatorLabel then
        indicatorLabel.Parent:Destroy()
        indicatorLabel = nil
    end
end

local ToggleIndicator = Tab1:Toggle({
    Title = "Indicator",
    Desc = "",
    Value = true,
    Callback = function(state)
        if state then
            EnableIndicator()
        else
            DisableIndicator()
        end
    end,
})

local function GetGoal()
    local closestDistance, closestGoal = math.huge, nil
    local player = game.Players.LocalPlayer
    local character = player.Character
    local torso = character and (character:FindFirstChild("Torso") or character:FindFirstChild("UpperTorso"))

    if not torso then return nil, closestDistance end
    local playerPosition = torso.Position

    for _, area in ipairs({"Courts", "PracticeArea"}) do
        local container = game.Workspace:FindFirstChild(area)
        if container then
            for _, court in ipairs(container:GetChildren()) do
                for _, obj in ipairs(court:GetDescendants()) do
                    if obj.Name == "Swish" and obj.Parent:FindFirstChildOfClass("TouchTransmitter") then
                        local distance = (playerPosition - obj.Parent.Position).Magnitude
                        if distance < closestDistance then
                            closestDistance = distance
                            closestGoal = obj.Parent
                        end
                    end
                end
            end
        end
    end

    return closestGoal, closestDistance
end

local function IsInRange(distance)
    return distance >= 59 and distance <= 72
end

local lastStatus = nil

function UpdateRangeStatus()
    if not indicatorLabel then return end

    local Goal, Distance = GetGoal()
    local newStatus

    if Goal then
        if IsInRange(math.floor(Distance)) then
            newStatus = "Perfect"
            indicatorLabel.TextColor3 = Color3.new(0, 1, 0) -- Green
        else
            newStatus = "Out"
            indicatorLabel.TextColor3 = Color3.new(1, 0.5, 0) -- Orange
        end
    else
        newStatus = "No Hoop"
        indicatorLabel.TextColor3 = Color3.new(1, 0, 0) -- Red
    end

    if newStatus ~= lastStatus then
        indicatorLabel.Text = "Range: " .. math.floor(Distance) .. " (" .. newStatus .. ")"
        lastStatus = newStatus
    end
end

-- 🛡️ AUTO GUARD SYSTEM 🛡️
local AutoGuardEnabled = false
local function GetClosestOpponent()
    local player = game.Players.LocalPlayer
    local character = player.Character
    if not character then return nil end

    local closestPlayer = nil
    local closestDistance = math.huge
    local playerPosition = character:FindFirstChild("HumanoidRootPart") and character.HumanoidRootPart.Position

    for _, opponent in ipairs(game.Players:GetPlayers()) do
        if opponent ~= player and opponent.Character then
            local opponentRoot = opponent.Character:FindFirstChild("HumanoidRootPart")
            if opponentRoot then
                local distance = (playerPosition - opponentRoot.Position).Magnitude
                if distance < closestDistance and distance < 25 then  -- Only detect nearby players
                    closestDistance = distance
                    closestPlayer = opponent.Character
                end
            end
        end
    end
    return closestPlayer
end

local function AutoGuard()
    while AutoGuardEnabled do
        local player = game.Players.LocalPlayer
        local character = player.Character
        local humanoid = character and character:FindFirstChildOfClass("Humanoid")
        local rootPart = character and character:FindFirstChild("HumanoidRootPart")
        local opponent = GetClosestOpponent()

        if humanoid and rootPart and opponent then
            local opponentRoot = opponent:FindFirstChild("HumanoidRootPart")
            if opponentRoot then
                local targetPosition = opponentRoot.Position + (opponentRoot.CFrame.LookVector * -2) -- Stay in front
                rootPart.CFrame = CFrame.new(targetPosition, opponentRoot.Position) -- Face the opponent
            end
        end

        wait(0.1) -- Smooth movement updates
    end
end

local ToggleAutoGuard = Tab1:Toggle({
    Title = "Auto Guard",
    Desc = "Automatically follows the nearest opponent",
    Value = false,
    Callback = function(state)
        AutoGuardEnabled = state
        if state then
            AutoGuard()
        end
    end,
})
